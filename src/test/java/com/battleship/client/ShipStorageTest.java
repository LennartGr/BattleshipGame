package com.battleship.client;

import static org.junit.Assert.*;

import org.junit.Before;
import org.junit.Test;

/**
 * Unit test for ship storage
 */
public class ShipStorageTest {

    private ShipStorage storage;
    private ShipStorage preparedStorage;
    private Ship ship1;
    private Ship ship2;
    private int height = 10;
    private int width = 10;

    @Before
    public void setUp() throws BattleshipException {
        storage = new ShipStorage(width, height);
        ship1 = new Ship(1, 2, "x");
        ship2 = new Ship(2, 4, "x");

        preparedStorage = new ShipStorage(width, height);
        preparedStorage.addShip(new Coordinates(0, 0), false, ship1);
        preparedStorage.addShip(new Coordinates(0, 1), true, ship2);
    }

    @Test
    public void invalidCoordinates() {
        assertThrows(BattleshipException.class, () -> {
            storage.addShip(new Coordinates('a', -1), false, ship1);
        });

        assertNull(storage.getValue(new Coordinates('a', 0)));

        assertThrows(BattleshipException.class, () -> {
            storage.addShip(new Coordinates('a', height), true, ship1);
        });
    }

    @Test
    public void setAndGet() throws BattleshipException {
        Coordinates co = new Coordinates('a', 0);
        storage.addShip(co, false, ship1);
        assertEquals((int) storage.getValue(co), ship1.getId());
        co = new Coordinates('b', 0);
        assertEquals((int) storage.getValue(co), ship1.getId());
        co = new Coordinates('c', 0);
        assertNull(storage.getValue(co));

        // place ship where there's already one
        assertThrows(BattleshipException.class, () -> {
            Coordinates conew = new Coordinates('b', 0);
            storage.addShip(conew, true, ship2);
        });
    }

    // following unit tests are generated by chatGPT

    @Test(expected = BattleshipException.class)
    public void testAttackOutOfBounds() throws BattleshipException {
        Coordinates coordinates = new Coordinates(10, 10);
        storage.attack(coordinates);
    }

    @Test(expected = BattleshipException.class)
    public void testAttackAlreadyAttacked() throws BattleshipException {
        Ship ship = new Ship(1, 3, "A");
        Coordinates startCoordinates = new Coordinates(0, 0);
        boolean vertical = true;
        storage.addShip(startCoordinates, vertical, ship);

        Coordinates attackCoordinates = new Coordinates(0, 0);
        storage.attack(attackCoordinates);
        storage.attack(attackCoordinates);
    }

    @Test
    public void testAttackMissed() throws BattleshipException {
        Ship ship = new Ship(1, 3, "A");
        Coordinates startCoordinates = new Coordinates(0, 0);
        boolean vertical = true;
        storage.addShip(startCoordinates, vertical, ship);

        Coordinates attackCoordinates = new Coordinates(3, 3);
        assertEquals(ShipStorage.HitStatus.MISSED, storage.attack(attackCoordinates));
    }

    @Test
    public void testAttackHit() throws BattleshipException {
        Ship ship = new Ship(1, 3, "A");
        Coordinates startCoordinates = new Coordinates(0, 0);
        boolean vertical = true;
        storage.addShip(startCoordinates, vertical, ship);

        Coordinates attackCoordinates = new Coordinates(0, 1);
        assertEquals(ShipStorage.HitStatus.HIT, storage.attack(attackCoordinates));
    }

    @Test
    public void testAttackDestroyed() throws BattleshipException {
        // Add a ship to the storage
        Ship ship = new Ship(1, 2, "S");
        Coordinates startCoordinates = new Coordinates(0, 0);
        storage.addShip(startCoordinates, true, ship);

        // Attack the first coordinate of the ship
        Coordinates hitCoordinates = new Coordinates(0, 0);
        ShipStorage.HitStatus hitStatus = storage.attack(hitCoordinates);
        assertEquals(ShipStorage.HitStatus.HIT, hitStatus);

        // Attack the second coordinate of the ship
        hitCoordinates = new Coordinates(0, 1);
        hitStatus = storage.attack(hitCoordinates);
        assertEquals(ShipStorage.HitStatus.DESTROYED, hitStatus);

        // Check that both coordinates of the ship are marked as destroyed
        assertEquals(ShipStorage.HitStatus.DESTROYED, storage.getHitStatus(new Coordinates(0, 0)));
        assertEquals(ShipStorage.HitStatus.DESTROYED, storage.getHitStatus(hitCoordinates));
    }
}
